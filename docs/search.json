[{"path":"https://kalis.louisaslett.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Louis Aslett. Author, maintainer. Ryan Christ. Author.","code":""},{"path":"https://kalis.louisaslett.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aslett L, Christ R (2022). kalis: High Performance Li & Stephens Local Ancestry Inference. https://kalis.louisaslett.com/, https://github.com/louisaslett/kalis.","code":"@Manual{,   title = {kalis: High Performance Li & Stephens Local Ancestry Inference},   author = {Louis Aslett and Ryan Christ},   year = {2022},   note = {https://kalis.louisaslett.com/, https://github.com/louisaslett/kalis}, }"},{"path":"https://kalis.louisaslett.com/index.html","id":"kalis-high-performance-li--stephens-local-ancestry-inference","dir":"","previous_headings":"","what":"High Performance Li & Stephens Local Ancestry Inference","title":"High Performance Li & Stephens Local Ancestry Inference","text":"kalis provides high performance implementation Li & Stephens model (doi: 10.1093/genetics/165.4.2213) local ancestry inference (local referring region genome). set N phased haplotypes, kalis computes posterior marginal probability haplotype copying every haplotype running N hidden Markov models parallel. yields N x N matrix summarizes recent local ancestry locus interest. package provides functionality specifying recombination map, site-specific mutation rates, differing prior copying probabilities recipient haplotype. Extensive use made low level threading CPU vector instructions.","code":""},{"path":"https://kalis.louisaslett.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"High Performance Li & Stephens Local Ancestry Inference","text":"kalis appear CRAN due course. now, current development version can installed using remotes package follows: Note kalis uses various low-level optimisations meaning ensure compiler targeting local CPU architecture. simplest way pass configure variables setting correct CFLAGS install time: correct flags set, kalis fall back implementation use special vector instruction set architecture CPU provide warning load package R session.","code":"install.packages(\"remotes\") remotes::install_github(\"louisaslett/kalis\") remotes::install_github(\"louisaslett/kalis\",   configure.vars = c(kalis = \"PKG_CFLAGS='-march=native -mtune=native -O3'\"))"},{"path":"https://kalis.louisaslett.com/reference/Backward.html","id":null,"dir":"Reference","previous_headings":"","what":"Propagate a backward table — Backward","title":"Propagate a backward table — Backward","text":"Propagates kalisBackwardTable upstream variant. table updated -place.","code":""},{"path":"https://kalis.louisaslett.com/reference/Backward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propagate a backward table — Backward","text":"","code":"Backward(   bck,   pars,   t = bck$l - 1,   nthreads = min(parallel::detectCores(logical = FALSE), bck$to_recipient -     bck$from_recipient + 1),   beta.theta = FALSE )"},{"path":"https://kalis.louisaslett.com/reference/Backward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propagate a backward table — Backward","text":"bck kalisBackwardTable object, returned MakeBackwardTable. pars kalisParameters object, returned Parameters. t variant move backward table . Must less equal current variant bck. default, simply advances variant immediately upstream. nthreads number CPU cores use. default uses parallel package detect number physical cores. beta.theta logical indicating whether table returned beta-theta space standard space upon reaching target variant t.  See details section.","code":""},{"path":"https://kalis.louisaslett.com/reference/Backward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Propagate a backward table — Backward","text":"nothing returned. performance reasons, bck updated -place.","code":""},{"path":"https://kalis.louisaslett.com/reference/Backward.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Propagate a backward table — Backward","text":"Backward implements backward algorithm propagate Li Stephens rescaled hidden Markov model backward probabilities new target variant.  Naturally, can propagate table variants upstream current position. mathematical details please see Section 2 kalis paper (TODO: ref). Note precise formulation backward equation determined whether flag use.spiedel set parameters provided pars. Beta-theta space rescaled HMM backward probabilities incorporate haplotype relatedness information downstream including target variant, standard definition HMM backward probabilities -- refer \"beta space.\" contrast, rescaled forward probabilities, naturally incorporate haplotype relatedness information upstream including target variant. Setting beta.theta = TRUE incorporates target variant (analogous rescaled forward probabilities) -- refer \"beta-theta space\". backward table beta-theta space (beta.theta = TRUE) can propagated upstream variant without incorporating variant, thereby moving beta space (beta.theta = FALSE), vice versa. However, backward table beta space (beta.theta = FALSE) can updated incorporate current variant, backward table already beta-theta space can move beta space without changing variants -- involve \"forgetting\" current variant (see Examples).","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/Backward.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Propagate a backward table — Backward","text":"","code":"if (FALSE) { # Load the toy haplotype example and set toy parameters CacheHaplotypes(SmallHaplotypes) pars <- Parameters(rho = CalcRho(cM = SmallMap))  # Create a backward table for the hidden Markov model incorporating all # recipient and donor haplotypes bck <- MakeBackwardTable(pars)  # Create a backward table for the hidden Markov model incorporating only # recipient haplotypes 100 to 200 (inclusive) and all donor haplotypes. bck <- MakeBackwardTable(pars, 100, 200)  # This table is uninitialised, but ready to pass to the Backward function # which will trigger initialisation and propagation from the last variant. # For example, initialise and propagate backward to the 10th variant: Backward(bck, pars, 10, nthreads = 8) print(bck)  #### Beta-theta space example #### # Now moving to beta-theta space Backward(bck, pars, 8, beta.theta=TRUE)  # Now moving to beta space (can be done with or without propagating to a new variant) Backward(bck, pars, 8, beta.theta=FALSE)  # Attempting to move from beta space to beta-theta space without propagating # is not possible (see Details). Backward(bck, pars, 8, beta.theta=TRUE) }"},{"path":"https://kalis.louisaslett.com/reference/CacheHaplotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Load haplotypes into package memory space — CacheHaplotypes","title":"Load haplotypes into package memory space — CacheHaplotypes","text":"Load haplotypes hard drive R matrix optimized kalis package memory space (overwrites previous load).","code":""},{"path":"https://kalis.louisaslett.com/reference/CacheHaplotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load haplotypes into package memory space — CacheHaplotypes","text":"","code":"CacheHaplotypes(   haps,   loci.idx = NULL,   hap.idx = NULL,   warn.singletons = TRUE,   format = \"auto\",   ... )"},{"path":"https://kalis.louisaslett.com/reference/CacheHaplotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load haplotypes into package memory space — CacheHaplotypes","text":"haps can name file haplotypes read, can R matrix containing 0/1s. See Details section supported file types. loci.idx optional vector indicies specifying loci load cache, indexed 1. hap.idx optional vector incidies specifying haplotypes load cache, indexed 1. warn.singletons logical, FALSE, suppress warning singletons (variants one 1 one 0) present loaded haps.  Defaults TRUE.  See Details. format file format haps stored , \"auto\" detect format based file extension.  Recognised options \"hapgz\" (format used IMPUTE2 SHAPEIT) \"hdf5\" (custom).  See Details section information easy conversion VCF/BCF formats. ... format specific options reading haps.  Supported optional arguments : hapgz legendgz.file string faster loading: legendgz file can supplied used efficiently determine number variants hapgz file L integer faster loading: number variants hapgz file can directly provided N integer faster loading: number haplotypes hapgz file can directly provided hdf5 transpose logical, TRUE, switch interpretation rows columns haps: hence switching number haplotypes number variants (HDF5 specification prescribe row/column interpretation, defining slowest changing dimension 'first'). Defaults FALSE. haps.path string giving path 2-dimensional object HDF5 file specifying haplotype matrix.  Defaults /haps hdf5.pkg string giving HDF5 R package use load file disk.  packages rhdf5 (BioConductor) hdf5r (CRAN) supported.  Default use hdf5r packages available, fallback rhdf5.  never need specified unless packages want force use rhdf5 package. R matrix transpose logical, TRUE, switch interpretation rows columns haps: hence switching number haplotypes number variants.  Defaults FALSE, meaning loci taken rows haplotypes columns (ie num loci x num haps matrix)","code":""},{"path":"https://kalis.louisaslett.com/reference/CacheHaplotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load haplotypes into package memory space — CacheHaplotypes","text":"Nothing returned function. highly recommended run CacheSummary CacheHaplotypes, especially uncertain interpretation rows columns haps. CacheSummary shows number haplotypes variants reversed, try calling CacheHaplotypes extra argument transpose = TRUE.","code":""},{"path":"https://kalis.louisaslett.com/reference/CacheHaplotypes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load haplotypes into package memory space — CacheHaplotypes","text":"achieve higher performance, kalis internally represents haplotypes efficient raw binary format memory.  function load haplotypes file binary R matrix convert kalis' internal format ready use functions package.  Note one set haplotypes can cached time calling function twice overwrites cache haplotypes created first function call. Including singletons (variants one 1 one 0) loaded haplotypes can lead numerical instability columns NaNs resulting forward backward tables mu (see Parameters) small.  Thus, kalis throws warning loaded haplotypes contain singletons. present, hap.gz hdf5 supported natively, see example showing convert VCF/BCF hap.gz one bcftools command. hap.gz format HAP/LEGEND/SAMPLE format used IMPUTE2 SHAPEIT.  .hap.gz file required loading CacheHaplotypes though .legend.gz file can speed reading haplotypes. See http://samtools.github.io/bcftools/bcftools.html#convert details format. R matrix supplying R matrix, must consist 0's 1's.  haplotypes stored columns, variants rows.  , dimensions : (num rows)x(num cols) = (num variants)x(num haplotypes). fine delete matrix calling CacheHaplotypes. HDF5 format HDF5 files, kalis expects 2-dimensional object named haps root level HDF5 file.  Haplotypes stored slowest changing dimension defined HDF5 specification (note different languages treat rows columns).  haplotypes stored dimension simply set argument transpose = TRUE. user unsure convention language used create HDF5 file, simplest approach simply load data specifying HDF5 file name confirm number haplotypes length exchanged diagnostic output kalis prints.","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/CacheHaplotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load haplotypes into package memory space — CacheHaplotypes","text":"","code":"# Examples if (FALSE) {  # If starting from a VCF/BCF # first use bcftools to convert to HAP/SAMPLE/LEGEND format # (bcftools can take in several starting formats), see http://samtools.github.io/bcftools/bcftools.html#convert . system(\"bcftools convert -h my.vcf.gz\") CacheHaplotypes(\"my.hap.gz\") CacheSummary()   # If starting directly from a hap.gz file on disk (HAP/LEGEND/SAMPLE format), see http://samtools.github.io/bcftools/bcftools.html#convert . CacheHaplotypes(\"my.hap.gz\") # eg: loading the mini example built into the package: CacheHaplotypes(system.file(\"small_example/small.hap.gz\", package = \"kalis\")) CacheSummary()   # If starting from a HDF5 file on disk CacheHaplotypes(\"my.h5\") # eg: loading the mini example built into the package: CacheHaplotypes(system.file(\"small_example/small.h5\", package = \"kalis\")) CacheSummary()   # If CacheSummary() indicates that the numbers of # haplotypes and variants are the wrong way around, reload with # argument to transpose CacheHaplotypes(\"myhaps.h5\", transpose = TRUE) CacheSummary()   # Alternatively, if you have an exotic file format that can be loaded in to # R by other means, then a binary matrix can be supplied.  This example # randomly simulated a binary matrix to illustrate (in reality load from # disk): n.haps <- 100 n.loci <- 20000 haps <- matrix(sample(0:1, n.haps*n.loci, replace = TRUE),                nrow = n.loci,                ncol = n.haps) CacheHaplotypes(haps) # eg: loading the mini example built into the package: data(\"SmallHaps\") CacheHaplotypes(SmallHaps) }"},{"path":"https://kalis.louisaslett.com/reference/CacheSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve information about the haplotype cache — CacheSummary","title":"Retrieve information about the haplotype cache — CacheSummary","text":"Retrieve information haplotype cache","code":""},{"path":"https://kalis.louisaslett.com/reference/CacheSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve information about the haplotype cache — CacheSummary","text":"","code":"CacheSummary()  N()  L()"},{"path":"https://kalis.louisaslett.com/reference/CacheSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve information about the haplotype cache — CacheSummary","text":"CacheSummary() prints information current state kalis cache. N() returns number haplotypes currently kalis cache, NULL cache empty. L() returns number variants currently kalis cache, NULL cache empty.","code":""},{"path":"https://kalis.louisaslett.com/reference/CalcRho.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate recombination probabilities — CalcRho","title":"Calculate recombination probabilities — CalcRho","text":"Calculate recombination probabilities, rho, given recombination map.","code":""},{"path":"https://kalis.louisaslett.com/reference/CalcRho.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate recombination probabilities — CalcRho","text":"","code":"CalcRho(cM = 0, s = 1, gamma = 1, floor = TRUE)"},{"path":"https://kalis.louisaslett.com/reference/CalcRho.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate recombination probabilities — CalcRho","text":"cM vector specifying recombination distance variants centimorgans. Note element vector distance variants +1 (-1), thus length one less number variants. can easily obtained applying diff recombination map 'CDF'. default, recombination probabilities zero, meaning variants perfectly linked. s scalar multiplier recombination map (related effective population size). gamma scalar power Morgan distances raised. floor TRUE (default) recombination probabilities machine precision (1e-16) zeroed . FALSE raw recombination probabilities preserved.","code":""},{"path":"https://kalis.louisaslett.com/reference/CalcRho.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate recombination probabilities — CalcRho","text":"vector recombination probabilities can used rho argument Parameters function creating parameter set.","code":""},{"path":"https://kalis.louisaslett.com/reference/CalcRho.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate recombination probabilities — CalcRho","text":"convenient function calculate recombination probabilities rho (Li Stephens hidden Markov model transition probabilities) recombination map. TODO: add kalis paper cross ref. See page 3 Supplemental Information original ChromoPainter paper (Lawson et al., 2012) motivation behind parameterization, follows: $$\\rho = \\exp(-s \\times cM^\\gamma) - 1$$","code":""},{"path":"https://kalis.louisaslett.com/reference/CalcRho.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate recombination probabilities — CalcRho","text":"Lawson, D. J., Hellenthal, G., Myers, S., & Falush, D. (2012). Inference population structure using dense haplotype data. PLoS genetics, 8(1).","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/CalcRho.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate recombination probabilities — CalcRho","text":"","code":"if (FALSE) { # Load the mini example recombination map from package: small.map <- read.table(system.file(\"small_example/small.map\", package = \"kalis\"), header = TRUE) # Or, from the package built-in dataset data(SmallMap)  # Compute the recombination probabilities rho <- CalcRho(diff(SmallMap)) }"},{"path":"https://kalis.louisaslett.com/reference/ClearHaplotypeCache.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove all cached haplotypes and free memory — ClearHaplotypeCache","title":"Remove all cached haplotypes and free memory — ClearHaplotypeCache","text":"Remove haplotypes cached previous caching call free memory allocated future use.","code":""},{"path":"https://kalis.louisaslett.com/reference/ClearHaplotypeCache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove all cached haplotypes and free memory — ClearHaplotypeCache","text":"","code":"ClearHaplotypeCache()"},{"path":"https://kalis.louisaslett.com/reference/ClearHaplotypeCache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove all cached haplotypes and free memory — ClearHaplotypeCache","text":"Nothing returned.","code":""},{"path":"https://kalis.louisaslett.com/reference/ClearHaplotypeCache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove all cached haplotypes and free memory — ClearHaplotypeCache","text":"achieve higher performance, kalis internally represents haplotypes efficient raw binary format memory directly viewed manipulated R.  particular, cache sits outside R's memory management never garbage collected (unless R quit package unloaded).  Therefore, function provided enable freeing memory used cache.","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/ClearHaplotypeCache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove all cached haplotypes and free memory — ClearHaplotypeCache","text":"","code":"# Examples if (FALSE) { ClearHaplotypeCache() }"},{"path":"https://kalis.louisaslett.com/reference/CopyTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy Forward/Backward tables — CopyTable","title":"Copy Forward/Backward tables — CopyTable","text":"Copies contents one forward/backward table another.","code":""},{"path":"https://kalis.louisaslett.com/reference/CopyTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy Forward/Backward tables — CopyTable","text":"","code":"CopyTable(to, from)"},{"path":"https://kalis.louisaslett.com/reference/CopyTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy Forward/Backward tables — CopyTable","text":"kalisForwardTable kalisBackwardTable object copied . kalisForwardTable kalisBackwardTable object copied .","code":""},{"path":"https://kalis.louisaslett.com/reference/CopyTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy Forward/Backward tables — CopyTable","text":"core code kalis operates forward backward tables low level, speed (using low level CPU vector instructions) also avoid unnecessary memory copies since tables tend large serious genetics applications.  result, attempt copy table standard idomatic way R: fwd2 <- fwd two variables merely point table: running forward algorithm fwd result fwd2 also changing. function therefore designed enable explicit copying tables.","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/CopyTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy Forward/Backward tables — CopyTable","text":"","code":"# Examples if (FALSE) { # Create a forward table for the hidden Markov model incorporating all # recipient and donor haplotypes fwd <- MakeForwardTable()  # Propagate forward to variant 10: Forward(fwd, pars, 10, nthreads = 8)  # This does **NOT** work as intended: fwd2 <- fwd Forward(fwd, pars, 20, nthreads = 8)  # Both tables are now at variant 20 fwd fwd2  # Instead, to copy we create another table and use this function fwd2 <- MakeForwardTable() CopyTable(fwd2, fwd) }"},{"path":"https://kalis.louisaslett.com/reference/DistMat.html","id":null,"dir":"Reference","previous_headings":"","what":"Distance matrix — DistMat","title":"Distance matrix — DistMat","text":"Utility calculating posterior marginal probabilities distance matrices , , excluding variants.","code":""},{"path":"https://kalis.louisaslett.com/reference/DistMat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distance matrix — DistMat","text":"","code":"DistMat(   fwd,   bck,   type = \"raw\",   M = NULL,   beta.theta.opts = NULL,   nthreads = min(parallel::detectCores(logical = FALSE), fwd$to_recipient -     fwd$from_recipient + 1) )"},{"path":"https://kalis.louisaslett.com/reference/DistMat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Distance matrix — DistMat","text":"fwd forward table returned MakeForwardTable bck backward table returned MakeBackwardTable type string; must one \"raw\", \"std\" \"minus.min\".  See details. M pre-existing matrix write distances, can yield substantial speed requires special attention (see Details) beta.theta.opts list; see Details. nthreads number CPU cores use. default parallelism used. from_recipient offset distributed problems, see kalis distributed.","code":""},{"path":"https://kalis.louisaslett.com/reference/DistMat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Distance matrix — DistMat","text":"Matrix distances. \\((j,)\\)-th element returned matrix inferred distance \\(d_{ji}\\) haplotype \\(j\\) haplotype \\(\\) current locus.  column encodes output independent HMM: column \\(\\), haplotype \\(\\) taken observed recipient haplotype painted mosaic \\(N-1\\) haplotypes. Hence, distances asymmetric.  wish plot matrix perform clustering, may want symmetrize matrix first. calculating many distance matrices succession, providing pre-existing matrix M can updated -place can drastically increase speed eliminating time needed memory allocation. warned, since matrix updated -place, variables point memory address, also simultaneously overwritten.  example, writing   update M P simultaneously. provided, M must dimensions matching fwd$alpha.  Typically, simply \\(N\\) x \\(N\\) \\(N\\) haplotypes. However, kalis run distributed, M \\(N\\) x \\(R\\) matrix \\(R\\) number recipient haplotypes given machine. order obtain distance matrices variants fwd$l bck$l, bck must beta.theta space.  allows forward backward tables transitioning tables genomic position fwd$l bck$l. precise recombination distance table propagated can controlled passing optional arguments list via beta.theta.opts. recombination distances used can specified one two ways. Manually.  case, beta.theta.opts list containing two named elements: \"rho.fwd\" \\(\\(0,1)\\) specifies transition probability \\(rho\\) propagating forward table \"rho.bck\" \\(\\(0,1)\\) specifies transition probability \\(rho\\) propagating backward table. Implicitly.  case, beta.theta.opts list containing two named elements: \"pars\": kalisParameters object implicitly defines recombination distance \\(\\rho^\\star\\) fwd$l bck$l \"bias\" \\(\\(0,1)\\).  forward table propagated distance bias\\(\\rho^\\star\\) backward table propagated distance (1-bias)\\(\\rho^\\star\\).","code":"M <- matrix(0,nrow(fwd$alpha),ncol(fwd$alpha)) P <- M DistMat(fwd,bck,M=M)"},{"path":"https://kalis.louisaslett.com/reference/DistMat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distance matrix — DistMat","text":"computes local probability distance matrix based forward backward tables certain locus.  default usage provide forward backward tables locus \\(l\\). \\((j,)\\)-th element returned matrix inferred distance \\(d_{ji}\\) haplotypes \\(j\\) \\(\\) current locus, \\(l\\), two tables given haplotypes observed (whole sequence). particular, $$d_{ji} = -log(p_{ji})$$ \\(p_{ji}\\) posterior marginal probability \\(j\\) coped \\(\\) current locus two tables, \\(l\\), given haplotypes observed (whole sequence). convention, \\(d_{ii} = 0\\) \\(\\). returned type \"raw\" (default). However, convenience, user may change type \"std\" order distances mean variance normalized returning.  Changing type \"minus.min\" subtract min distance column column returning (default RELATE, see bottom RELATE paper Supplement Page 7 (Speidel et al, 2019)) function also allows users calculate distance matrices variants also calculate matrices exclude set consecutive variants passing backward table beta.theta space.  beta.theta space, bck$l may greater equal fwd$l.  beta.theta.opts provides required case set much recombination distance propagate matrix combining distances.  See Details .","code":""},{"path":"https://kalis.louisaslett.com/reference/DistMat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distance matrix — DistMat","text":"Speidel, L., Forest, M., Shi, S., & Myers, S. (2019). method genome-wide genealogy estimation thousands samples. Nature Genetics, 51(1321–1329).","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/DistMat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distance matrix — DistMat","text":"","code":"if (FALSE) { # To get the distances at, say, locus 10 ... Forward(fwd, pars, 10, nthreads = 8) Backward(bck, pars, 10, nthreads = 8) d <- DistMat(fwd, bck) }"},{"path":"https://kalis.louisaslett.com/reference/Forward.html","id":null,"dir":"Reference","previous_headings":"","what":"Propagate a forward table — Forward","title":"Propagate a forward table — Forward","text":"Propagates kalisForwardTable downstream variant. table updated -place.","code":""},{"path":"https://kalis.louisaslett.com/reference/Forward.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propagate a forward table — Forward","text":"","code":"Forward(   fwd,   pars,   t = fwd$l + 1,   nthreads = min(parallel::detectCores(logical = FALSE), fwd$to_recipient -     fwd$from_recipient + 1) )"},{"path":"https://kalis.louisaslett.com/reference/Forward.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propagate a forward table — Forward","text":"fwd kalisForwardTable object, returned MakeForwardTable. pars kalisParameters object, returned Parameters. t variant move forward table . Must greater equal current variant fwd. default, simply advances next variant downstream. nthreads number CPU cores use. default uses parallel package detect number physical cores.","code":""},{"path":"https://kalis.louisaslett.com/reference/Forward.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Propagate a forward table — Forward","text":"nothing returned. performance reasons, fwd updated -place.","code":""},{"path":"https://kalis.louisaslett.com/reference/Forward.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Propagate a forward table — Forward","text":"Forward implements forward algorithm advance Li Stephens rescaled hidden Markov model forward probabilities new target variant.  Naturally, can propagate table variants downstream current position. mathematical details please see Section 2 kalis paper (TODO: ref). Note precise formulation forward equation determined whether flag use.spiedel set parameters provided pars.","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/Forward.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Propagate a forward table — Forward","text":"","code":"if (FALSE) { # Load the toy haplotype example and set toy parameters CacheHaplotypes(SmallHaplotypes) pars <- Parameters(rho = CalcRho(cM = SmallMap))  # Create a forward table for the hidden Markov model incorporating all # recipient and donor haplotypes fwd <- MakeForwardTable(pars)  # Create a forward table for the hidden Markov model incorporating only # recipient haplotypes 100 to 200 (inclusive) and all donor haplotypes. fwd <- MakeForwardTable(pars, 100, 200)  # This table is uninitialised, but ready to pass to the Forward function # which will trigger initialisation and propagation. # For example, initialise and propagate forward to the 10th variant: Forward(fwd, pars, 10, nthreads = 8) print(fwd) }"},{"path":"https://kalis.louisaslett.com/reference/MakeBackwardTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a kalisBackwardTable — MakeBackwardTable","title":"Create a kalisBackwardTable — MakeBackwardTable","text":"Allocates memory initializes backward table.","code":""},{"path":"https://kalis.louisaslett.com/reference/MakeBackwardTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a kalisBackwardTable — MakeBackwardTable","text":"","code":"MakeBackwardTable(pars, from_recipient = 1, to_recipient = Inf)"},{"path":"https://kalis.louisaslett.com/reference/MakeBackwardTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a kalisBackwardTable — MakeBackwardTable","text":"pars kalisParameters object specifying genetics parameters associated backward table.  parameters can set using Parameters function. from_recipient first recipient haplotype included creating partial backward table.  default includes first recipient haplotype.  Haplotypes indexed 1. to_recipient last recipient haplotype included creating partial backward table.  default includes last recipient haplotype.  Haplotypes indexed 1.","code":""},{"path":"https://kalis.louisaslett.com/reference/MakeBackwardTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a kalisBackwardTable — MakeBackwardTable","text":"specialized list class kalisBackwardTable. elements backward table list : l denotes current variant position.  2147483647 indicates newly created backward table yet propagated variant. beta matrix rescaled backward probabilities Li Stephens HMM. column beta corresponds independent HMM \\(\\beta^l_{ji}\\) proportional probability observing haplotype \\(\\) variant \\(l+1\\) variant \\(L\\) given haplotype \\(j\\) copied haplotype \\(\\) variant \\(l\\). beta.g vector containing scaling constants needed continue propagating HMM (TODO: add ref please see kalis paper details). beta.theta boolean indicator whether matrix beta currently -called beta-theta space .  See Backward details beta-theta space specified run. kalisBackwardTable also carries checksum key parameters pars provided. one attempts interact kalisBackwardTable kalisForwardTable mismatched parameters, error thrown.","code":""},{"path":"https://kalis.louisaslett.com/reference/MakeBackwardTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a kalisBackwardTable — MakeBackwardTable","text":"MakeBackwardTable initializes kalisBackwardTable object store rescaled backward probabilities recipient haplotype.  Note: since haplotypes loaded CacheHaplotypes kalis cache taken potential donor haplotypes, table size (total # haplotypes cache)x(# recipients). Also note table object linked given set Li Stephens hidden Markov model parameters, created Parameters, ensure consistency given HMM run. returned kalisBackwardTable ready propagated given target variant function Backward. Note: column corresponds independent Li Stephens hidden Markov model (ie recipient).  Therefore, possible create partial backward table object corresponds subset recipients using from_recipient to_recipient arguments.","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/MakeBackwardTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a kalisBackwardTable — MakeBackwardTable","text":"","code":"if (FALSE) { # Load the toy haplotype example and set toy parameters CacheHaplotypes(SmallHaplotypes) pars <- Parameters(rho = CalcRho(cM = SmallMap))  # Create a backward table for the hidden Markov model incorporating all # recipient and donor haplotypes bck <- MakeBackwardTable(pars)  # OR, create a backward table for the hidden Markov model incorporating only # recipient haplotypes 100 to 200 (inclusive) and all donor haplotypes. bck <- MakeBackwardTable(pars, 100, 200) }"},{"path":"https://kalis.louisaslett.com/reference/MakeForwardTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a kalisForwardTable — MakeForwardTable","title":"Create a kalisForwardTable — MakeForwardTable","text":"Allocates memory initializes forward table.","code":""},{"path":"https://kalis.louisaslett.com/reference/MakeForwardTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a kalisForwardTable — MakeForwardTable","text":"","code":"MakeForwardTable(pars, from_recipient = 1, to_recipient = Inf)"},{"path":"https://kalis.louisaslett.com/reference/MakeForwardTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a kalisForwardTable — MakeForwardTable","text":"pars kalisParameters object specifying genetics parameters associated forward table.  parameters can set using Parameters function. from_recipient first recipient haplotype included creating partial forward table.  default includes first recipient haplotype.  Haplotypes indexed 1. to_recipient last recipient haplotype included creating partial forward table.  default includes last recipient haplotype.  Haplotypes indexed 1.","code":""},{"path":"https://kalis.louisaslett.com/reference/MakeForwardTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a kalisForwardTable — MakeForwardTable","text":"specialized list class kalisForwardTable. elements forward table list : l denotes current variant position.  Zero indicates newly created forward table yet propagated variant. alpha matrix rescaled forward probabilities Li Stephens HMM. column alpha corresponds independent HMM \\(\\alpha^l_{ji}\\) proportional probability haplotype \\(j\\) copied haplotype \\(\\) variant \\(l\\) observing haplotype \\(\\) variant 1 variant \\(l\\). alpha.f vector containing scaling constants needed continue propagating HMM (TODO: add ref please see kalis paper details). kalisForwardTable also carries checksum key parameters pars provided. one attempts interact kalisForwardTable kalisBackwardTable mismatched parameters, error thrown.","code":""},{"path":"https://kalis.louisaslett.com/reference/MakeForwardTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a kalisForwardTable — MakeForwardTable","text":"MakeForwardTable initializes kalisForwardTable object store rescaled forward probabilities recipient haplotype.  Note: since haplotypes loaded CacheHaplotypes kalis cache taken potential donor haplotypes, table size (total # haplotypes cache)x(# recipients). Also note table object linked given set Li Stephens hidden Markov model parameters, created Parameters, ensure consistency given HMM run. returned kalisForwardTable ready propagated given target variant function Forward. Note: column corresponds independent Li Stephens hidden Markov model (ie recipient).  Therefore, possible create partial forward table object corresponds subset recipients using from_recipient to_recipient arguments.","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/MakeForwardTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a kalisForwardTable — MakeForwardTable","text":"","code":"# Examples if (FALSE) { # Load the toy haplotype example and set toy parameters CacheHaplotypes(SmallHaplotypes) pars <- Parameters(rho = CalcRho(cM = SmallMap))  # Create a forward table for the hidden Markov model incorporating all # recipient and donor haplotypes fwd <- MakeForwardTable(pars)  # OR, create a forward table for the hidden Markov model incorporating only # recipient haplotypes 100 to 200 (inclusive) and all donor haplotypes. fwd <- MakeForwardTable(pars, 100, 200) }"},{"path":"https://kalis.louisaslett.com/reference/Parameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Define a set of Li and Stephens parameters — Parameters","title":"Define a set of Li and Stephens parameters — Parameters","text":"Specify parameter set used particular Li Stephens hidden Markov model run.","code":""},{"path":"https://kalis.louisaslett.com/reference/Parameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define a set of Li and Stephens parameters — Parameters","text":"","code":"Parameters(   rho = rep(0, get(\"L\", envir = pkgVars) - 1),   mu = 1e-08,   Pi = NULL,   use.speidel = FALSE,   check.rho = TRUE )"},{"path":"https://kalis.louisaslett.com/reference/Parameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define a set of Li and Stephens parameters — Parameters","text":"rho recombination probability vector (must L-1 long). See CalcRho assistance constructing recombination map. mu scalar (uniform) vector (varying) mutation probabilities. Pi leaving default uniform copying probabilities recommended computational efficiency. desired, full matrix background copying probabilities can provided, (j,)-th element background probability copies j. Hence, () diagonal must zero; (b) columns Pi must sum 1. Note: column corresponds independent Li Stephens hidden Markov model. use.speidel logical, TRUE, use asymmetric mutation model used RELATE (Speidel et al., 2019). WARNING: model assumes cached haplotypes ancestral/derived encoding -- zeros denote ancestral variant carriers ones denote derived variant carriers. Defaults FALSE. check.rho TRUE, check rho within machine precision performed. created rho using CalcRho floor=TRUE satisfied automatically. can important ensure convex combination rho (1-rho) normalises 1 within machine precision, advanced user may wish override requirement.","code":""},{"path":"https://kalis.louisaslett.com/reference/Parameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define a set of Li and Stephens parameters — Parameters","text":"kalisParameters object, suitable use create standard forward backward recursion tables MakeForwardTable MakeBackwardTable. Note also need provide parameters object propagating tables using either Forward Backward.","code":""},{"path":"https://kalis.louisaslett.com/reference/Parameters.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define a set of Li and Stephens parameters — Parameters","text":"3 parameters must specified forward backward equations Li Stephens hidden Markov model can run.  vector recombination probabilities, mutation probabilities, prior copying probabilities. Recombination probabilities, rho vector parameter must length L-1, L number variants loaded kalis memory cache (using CacheHaplotypes). Note element vector recombination probability variants +1. utility function, CalcRho, assist creating recombination probabilities recombination map. default, recombination probabilities set zero everywhere. Mutation probabilities, mu mutation probabilities may specified either uniform across variants (providing single scalar value), may varying variant (providing vector length equal number variants, L, loaded kalis memory cache). default, mutation probabilities set \\(10^{-8}\\). Copying probabilities, Pi original Li Stephens model assumed haplotype equal prior probability copying . However, spirit ChromoPainter (Lawson et al., 2012) allow matrix prior copying probabilities. copying probabilities may specified standard R matrix size \\(N \\times N\\) (\\(N\\) number haplotypes loaded kalis memory cache).  element row j, column corresponds prior (background) probability haplotype copies haplotype j. Note diagonal must definition zero columns must sum one. Alternatively, uniform copying probabilities, argument need specified (resulting copying probability \\(\\frac{1}{N-1}\\) everywhere). Note computational cost associated non-uniform copying probabilities, recommended leave default uniform probabilities appropriate (Note: specify uniform matrix uniform probabilities intended, since end incurring computational cost non-uniform probabilities).","code":""},{"path":"https://kalis.louisaslett.com/reference/Parameters.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Define a set of Li and Stephens parameters — Parameters","text":"Lawson, D. J., Hellenthal, G., Myers, S., & Falush, D. (2012). Inference population structure using dense haplotype data. PLoS genetics, 8(1). Speidel, L., Forest, M., Shi, S., & Myers, S. (2019). method genome-wide genealogy estimation thousands samples. Nature Genetics, 51(1321–1329).","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/Parameters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define a set of Li and Stephens parameters — Parameters","text":"","code":"if (FALSE) { # To use all the defaults pars <- Parameters()  # To use indirect genetics parameters which you have already specified in # morgan.dist, Ne and gamma variables to specify rho, leaving mu and Pi as # defaults pars <- Parameters(CalcRho(morgan.dist, Ne, gamma))  # Then use to create a table (eg for forward) ... fwd <- MakeForwardTable(pars) # ... and to propagate it Forward(fwd, pars, 10, nthreads = 8) }"},{"path":"https://kalis.louisaslett.com/reference/PostProbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior marginal probabilities — PostProbs","title":"Posterior marginal probabilities — PostProbs","text":"Calculated posterior marginal probabilities given locus using forward backward tables propagated position.","code":""},{"path":"https://kalis.louisaslett.com/reference/PostProbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior marginal probabilities — PostProbs","text":"","code":"PostProbs(   fwd,   bck,   unif.on.underflow = FALSE,   M = NULL,   beta.theta.opts = NULL,   nthreads = min(parallel::detectCores(logical = FALSE), fwd$to_recipient -     fwd$from_recipient + 1) )"},{"path":"https://kalis.louisaslett.com/reference/PostProbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior marginal probabilities — PostProbs","text":"fwd forward table returned MakeForwardTable bck backward table returned MakeBackwardTable unif..underflow logical; TRUE, probabilities column underflow, set \\(1/(N-1)\\) instead 0 M pre-existing matrix write probabilities, can yield substantial speed requires special attention (see Details) beta.theta.opts list; see Details. nthreads number CPU cores use. default parallelism used. from_recipient offset distributed problems, see kalis distributed.","code":""},{"path":"https://kalis.louisaslett.com/reference/PostProbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior marginal probabilities — PostProbs","text":"Matrix posterior marginal probabilities. \\((j,)\\)-th element returned matrix probability \\(j\\) copied \\(\\) current locus, \\(l\\), two tables, given haplotypes observed (whole sequence). calculating many posterior probability matrices succession, providing pre-existing matrix M can updated -place can drastically increase speed eliminating time needed memory allocation. warned, since matrix updated -place, variables point memory address, also simultaneously overwritten.  example, writing   update M P simultaneously.","code":"M <- matrix(0,nrow(fwd$alpha),ncol(fwd$alpha)) P <- M PostProbs(fwd,bck,M=M)"},{"path":"https://kalis.louisaslett.com/reference/PostProbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior marginal probabilities — PostProbs","text":"forward backward tables must locus order combined yield posterior marginal probabilities locus \\(l\\). \\((j,)\\)-th element returned matrix probability \\(j\\) copied \\(\\) current locus, \\(l\\), two tables, given haplotypes observed (whole sequence). Note column represents independent HMM. convention, every diagonal element zero.","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/PostProbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior marginal probabilities — PostProbs","text":"","code":"if (FALSE) { # To get the posterior probabilities at, say, locus 10 ... Forward(fwd, pars, 10, nthreads = 8) Backward(bck, pars, 10, nthreads = 8) p <- PostProbs(fwd, bck) }"},{"path":"https://kalis.louisaslett.com/reference/QueryCache.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve haplotypes from memory cache — QueryCache","title":"Retrieve haplotypes from memory cache — QueryCache","text":"Retrieve haplotypes memory cache, converting raw binary simple integer 0/1 inspection use R.","code":""},{"path":"https://kalis.louisaslett.com/reference/QueryCache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve haplotypes from memory cache — QueryCache","text":"","code":"QueryCache(loci.idx = NULL, hap.idx = NULL)"},{"path":"https://kalis.louisaslett.com/reference/QueryCache.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve haplotypes from memory cache — QueryCache","text":"loci.idx loci retrieve cache, specified (vector) index.  enables specifying loci offset order loaded cache (1 number loci). hap.idx haplotypes retrieve cache, specified (vector) index.  enables specifying haplotypes offset order loaded cache (1 number haplotypes).","code":""},{"path":"https://kalis.louisaslett.com/reference/QueryCache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve haplotypes from memory cache — QueryCache","text":"matrix 0/1 integers length(loci.idx) rows length(hap.idx) columns, haplotypes appear columns.","code":""},{"path":"https://kalis.louisaslett.com/reference/QueryCache.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Retrieve haplotypes from memory cache — QueryCache","text":"achieve higher performance, kalis internally represents haplotypes efficient raw binary format memory directly viewed manipulated R.  function enables copy whole partial haplotypes low-level format standard R matrix 0's 1's.","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/QueryCache.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve haplotypes from memory cache — QueryCache","text":"","code":"# Examples if (FALSE) { # For the purposes of an example, fill the cache with random haplotypes ... n.haps <- 100 n.loci <- 20000 haps <- matrix(sample(0:1, n.haps*n.loci, replace = TRUE),                nrow = n.loci,                ncol = n.haps) CacheHaplotypes(haps)  # ... and confirm we can read a chosen portion back.  Try to read back # the 10th and 11th haplotypes from loci 50 to 250 inclusive res <- QueryCache(50:250, 10:11) all(res == haps[50:250, 10:11]) }"},{"path":"https://kalis.louisaslett.com/reference/ResetTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset Forward/Backward tables — ResetTable","title":"Reset Forward/Backward tables — ResetTable","text":"Resets provided forward/backward table can propagate start/end Li Stephens hidden Markov model.","code":""},{"path":"https://kalis.louisaslett.com/reference/ResetTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset Forward/Backward tables — ResetTable","text":"","code":"ResetTable(tbl)"},{"path":"https://kalis.louisaslett.com/reference/ResetTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset Forward/Backward tables — ResetTable","text":"tbl kalisForwardTable kalisBackwardTable object reset.","code":""},{"path":"https://kalis.louisaslett.com/reference/ResetTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reset Forward/Backward tables — ResetTable","text":"usually faster reset forward/backward table rather remove make new one.  function marks table reset propagated freshly allocated.","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/ResetTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset Forward/Backward tables — ResetTable","text":"","code":"# Examples if (FALSE) { # Create a forward table for the hidden Markov model incorporating all # recipient and donor haplotypes fwd <- MakeForwardTable()  # Propagate forward to variant 10: Forward(fwd, pars, 10, nthreads = 8)  # This does **NOT** work as intended, cannot reverse from variant 10: Forward(fwd, pars, 5, nthreads = 8)  # Could reset the table though: ResetTable(fwd) Forward(fwd, pars, 5, nthreads = 8) }"},{"path":"https://kalis.louisaslett.com/reference/SmallHaps.html","id":null,"dir":"Reference","previous_headings":"","what":"SmallHaps Example Phased Haplotype Dataset for kalis — SmallHaps","title":"SmallHaps Example Phased Haplotype Dataset for kalis — SmallHaps","text":"Simulated dataset N=300 haplotypes L=400 loci generated using msprime (Kelleher et al., 2016).","code":""},{"path":"https://kalis.louisaslett.com/reference/SmallHaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SmallHaps Example Phased Haplotype Dataset for kalis — SmallHaps","text":"","code":"data(SmallHaps)"},{"path":"https://kalis.louisaslett.com/reference/SmallHaps.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"SmallHaps Example Phased Haplotype Dataset for kalis — SmallHaps","text":"object class matrix column simulated haplotype. suitable passing directly CacheHaplotypes.","code":""},{"path":"https://kalis.louisaslett.com/reference/SmallHaps.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SmallHaps Example Phased Haplotype Dataset for kalis — SmallHaps","text":"Kelleher, J., Etheridge, . M., & McVean, G. (2016). Efficient coalescent simulation genealogical analysis large sample sizes. PLoS computational biology, 12(5).","code":""},{"path":"https://kalis.louisaslett.com/reference/SmallHaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SmallHaps Example Phased Haplotype Dataset for kalis — SmallHaps","text":"","code":"if (FALSE) { data(\"SmallHaps\") # Plot Allele Frequencies hist(rowMeans(SmallHaps),breaks=20)  # Store in kalis hdf5 format WriteIndividualHaplotypeH5(\"SmallHaps.h5\", SmallHaps)  # Import into kalis cache directly ... CacheHaplotypes(SmallHaps) # ... or via the HDF5 file written out above CacheHaplotypes(\"SmallHaps.h5\") }"},{"path":"https://kalis.louisaslett.com/reference/WriteHaplotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Write haplotype matrix to HDF5 file — WriteHaplotypes","title":"Write haplotype matrix to HDF5 file — WriteHaplotypes","text":"Writes R matrix 0/1s HDF5 format used reading optimised memory cache.  working large haplotype dataset, recommend convert directly HDF5 format (see vignette) rather read R.","code":""},{"path":"https://kalis.louisaslett.com/reference/WriteHaplotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write haplotype matrix to HDF5 file — WriteHaplotypes","text":"","code":"WriteHaplotypes(   hdf5.file,   haps,   hap.ids = NA,   loci.ids = NA,   haps.name = \"/haps\",   hap.ids.name = \"/hap.ids\",   loci.ids.name = \"/loci.ids\",   append = FALSE )  ReadHaplotypes(   hdf5.file,   loci.idx = NA,   hap.idx = NA,   loci.ids = NA,   hap.ids = NA,   haps.name = \"/haps\",   loci.ids.name = \"/loci.ids\",   hap.ids.name = \"/hap.ids\",   transpose = FALSE )"},{"path":"https://kalis.louisaslett.com/reference/WriteHaplotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write haplotype matrix to HDF5 file — WriteHaplotypes","text":"hdf5.file name file haplotypes written . haps vector matrix column haplotype stored file hdf5.file. append logical indicating whether overwrite (default) append existing haps dataset already exists hdf5.file. ids vector indices haplotypes read.","code":""},{"path":"https://kalis.louisaslett.com/reference/WriteHaplotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Write haplotype matrix to HDF5 file — WriteHaplotypes","text":"WriteIndividualHaplotypeH5 return anything. ReadIndividualHaplotypeH5 returns binary matrix containing haplotypes specified ids.","code":""},{"path":"https://kalis.louisaslett.com/reference/WriteHaplotypes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Write haplotype matrix to HDF5 file — WriteHaplotypes","text":"primary method load data kalis' internal optimised cache HDF5 storage file.  user collection haplotypes already represented matrix 0's 1's R, function can used write HDF5 format required load cache. kalis expects 2-dimensional object named haps root level HDF5 file.  Haplotypes stored slowest changing dimension defined HDF5 specification (note different languages treat rows columns). Note hdf5.file exists contain dataset named haps, WriteIndividualHaplotypeH5 simply create haps dataset within existing file.","code":""},{"path":"https://kalis.louisaslett.com/reference/WriteHaplotypes.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Write haplotype matrix to HDF5 file — WriteHaplotypes","text":"ReadHaplotypes(): Read haplotype matrix HDF5 file","code":""},{"path":[]},{"path":"https://kalis.louisaslett.com/reference/WriteHaplotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write haplotype matrix to HDF5 file — WriteHaplotypes","text":"","code":"# Examples if (FALSE) { # For the purposes of an example, generate random haplotypes ... n.haps <- 100 n.loci <- 20000 haps <- matrix(sample(0:1, n.haps*n.loci, replace = TRUE),                nrow = n.loci,                ncol = n.haps)  # ... write them to a file ... WriteIndividualHaplotypeH5(\"myhaps.h5\", haps)  # ... and confirm we can read a chosen portion back.  Try to read back # the 10th and 11th haplotypes res <- ReadIndividualHaplotypeH5(\"myhaps.h5\", 10:11) all(res == haps[, 10:11]) }"},{"path":"https://kalis.louisaslett.com/reference/plot.kalisDistanceMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for a kalisDistanceMatrix object — plot.kalisDistanceMatrix","title":"Plotting function for a kalisDistanceMatrix object — plot.kalisDistanceMatrix","text":"Clusters given distance matrix generates heatmap display .","code":""},{"path":"https://kalis.louisaslett.com/reference/plot.kalisDistanceMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for a kalisDistanceMatrix object — plot.kalisDistanceMatrix","text":"","code":"# S3 method for kalisDistanceMatrix plot(x, cluster.method = \"average\", ...)"},{"path":"https://kalis.louisaslett.com/reference/plot.kalisDistanceMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for a kalisDistanceMatrix object — plot.kalisDistanceMatrix","text":"d kalisDistanceMatrix","code":""},{"path":"https://kalis.louisaslett.com/reference/plot.kalisDistanceMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function for a kalisDistanceMatrix object — plot.kalisDistanceMatrix","text":"nothing returned.","code":""}]
