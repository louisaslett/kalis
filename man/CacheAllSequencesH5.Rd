% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CacheAllSequences.R
\name{CacheAllSequencesH5}
\alias{CacheAllSequencesH5}
\title{Create memory cache of haplotype sequences}
\usage{
CacheAllSequencesH5(hdf5.file, transpose = FALSE)
}
\arguments{
\item{from_recipient}{first recipient haplotype if creating a partial forward
table.  By default includes from the first recipient haplotype.}

\item{to_recipient}{last recipient haplotype if creating a partial forward
table.  By default includes to the last recipient haplotype.}
}
\value{
Nothing is returned by the function.  However, a status message is
  output indicating how the dimensions of the HDF5 \code{seqs} object have
  been interpreted.  If this message shows the dimensions incorrectly ordered,
  call the function again with argument \code{transpose = TRUE}.
}
\description{
Load haplotype sequences from hard drive to memory.
}
\details{
To achieve higher performance, kalis internally represents haplotype sequences
in an efficient raw binary format in memory.  This function will load sequences
from an HDF5 file and convert this into kalis' internal format ready for use
by the other functions in this package.

The package expects a 2-dimensional object named \code{seqs} at the root
level of the HDF5 file.  Haplotypes should be stored in the slowest changing
dimension as defined in the HDF5 specification (note that different languages
treat this as rows or columns).  If the haplotypes are stored in the other
dimension then simply set the argument \code{transpose = TRUE}.
If the user is unsure of the convention of
the language they used to create the HDF5 file, then the simplest approach is
to just load the data specifying only the HDF5 file name and then confirm
that number of haplotypes and sequence length have not been exchanged.
}
\examples{
# Examples
\dontrun{

# Load sequences to cache from an HDF5 file on disk
CacheAllSequencesH5("myseqs.h5")

# If the diagnostic message printed during the above indicates the numbers
# of haplotypes and sequence length are the wrong way around, reload with
# argument to transpose
CacheAllSequencesH5("myseqs.h5", transpose = TRUE)

# When correct orientation is known, can avoid diagnostic messages for running
# in script files
suppressMessages(CacheAllSequencesH5("myseqs.h5"))
}

}
\seealso{
\code{\link{Forward}} to propagate the newly created table forward
  through the genome.
}
