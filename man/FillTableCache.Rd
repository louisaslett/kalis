% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TableCache.R
\name{FillTableCache}
\alias{FillTableCache}
\title{Fill a forward table cache}
\usage{
FillTableCache(
  cache,
  pars,
  nthreads = min(parallel::detectCores(logical = FALSE), cache[[1]]$to_recipient -
    cache[[1]]$from_recipient + 1)
)
}
\arguments{
\item{cache}{a cache of forward tables as generated by
\code{\link[=CreateForwardTableCache]{CreateForwardTableCache()}}}

\item{pars}{a \code{kalisParameters} object, as returned by \code{\link[=Parameters]{Parameters()}}.}

\item{nthreads}{the number of CPU cores to use.
By default no parallelism is used.}

\item{from}{the first locus which the geometrically spaced cache should be
built from.
By default the whole sequence length will be cached so this defaults to 1.}

\item{to}{the last locus up to which the geometrically spaced cache should be
built.
By default the whole sequence length will be cached so this defaults to
\code{Inf}.}
}
\value{
There is nothing returned.
For performance reasons, \code{cache} is updated in-place.
}
\description{
An in-memory cache for forward tables can be filled using this function, for
either the whole sequence length or some sub-sequence.
}
\details{
If the objective is to run the Li and Stephens hidden Markov model both
forwards and backwards to the same locus (and to do so for every possible
locus), then considerable efficiency can be achieved by first performing a
full scan forwards, filling a geometrically spaced cache whilst doing so.
Then, by working backwards, the backward propagation moves one locus at a
time and the forward propagation can move backwards by moving forward from a
recently cached local table.

Memory for a cache can be allocated using
\code{\link[=CreateForwardTableCache]{CreateForwardTableCache()}} and should then be filled with this
function.
To use the cache, then instead of using the \code{\link[=Forward]{Forward()}} function,
use \code{\link[=ForwardUsingTableCache]{ForwardUsingTableCache()}}.
}
\examples{
\dontrun{
# This code assumes you have already:
#  i) cached the haplotypes using CacheHaplotypes function
#  ii) setup parameters in a variable called pars
#  iii) set the number of loci in a variable called L

# Allocate up to 10GB to a cache, with parameters already setup in pars ...
cache <- CreateForwardTableCache(pars, 10)
# ... and fill it
FillTableCache(cache, pars, nthreads = 8)

# Create forward and backward tables
fwd <- MakeForwardTable(pars)
bck <- MakeBackwardTable(pars)

# Then reach every locus faster by iterating backwards, using the cache to
# move the forward table into position faster
for(l in L:1) {
  Backward(bck, pars, l, nthreads = 8)
  ForwardUsingTableCache(fwd, pars, cache, l, nthreads = 8)
  # Do whatever work is required at
  # every locus here using fwd and bck
}
}

}
\seealso{
\code{\link[=MakeForwardTable]{MakeForwardTable()}} to make a forward table;
\code{\link[=CreateForwardTableCache]{CreateForwardTableCache()}} to generate a cache;
\code{\link[=ForwardUsingTableCache]{ForwardUsingTableCache()}} to use a cache;
\code{\link[=Forward]{Forward()}} for forward function without using a cache.
}
