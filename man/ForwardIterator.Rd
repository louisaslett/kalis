% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Iterator.R
\name{ForwardIterator}
\alias{ForwardIterator}
\title{Build an efficient iterator over loci}
\usage{
ForwardIterator(
  pars,
  ram.ckpts = 1L,
  targets = 1:L(),
  base.fwd.table = NULL,
  disk.ckpts = 0,
  disk.dir = NULL,
  from_recipient = 1,
  to_recipient = Inf,
  lookup.tables = NULL,
  cache = NULL,
  save.cache = FALSE,
  force.unif = FALSE
)
}
\arguments{
\item{pars}{a \code{kalisParameters} object, as returned by \code{\link[=Parameters]{Parameters()}}.}

\item{ram.ckpts}{an integer specifying the number of checkpoints to store in RAM.}

\item{targets}{a vector of variants to iterate over (starting with the most downstream target).}

\item{base.fwd.table}{a \code{kalisForwardTable} either at the most upstream target, or if the targets are evenly spaced, one interval upstream of the most upstream target.
If \code{NULL} (the default), this is interpreted as the prior \code{Pi}, see \code{\link[=Parameters]{Parameters()}}.}

\item{disk.ckpts}{an integer specifying the number of checkpoints to store on disk.}

\item{disk.dir}{a path to a directory where a temporary folder may be made to store checkpoints on disk.}

\item{from_recipient}{first recipient haplotype included in the tables of the cache, if creating a partial forward table.
By default all are included from the first recipient haplotype.
Haplotypes are indexed from 1.}

\item{to_recipient}{last recipient haplotype included in the tables of the cache, if creating a partial forward table.
By default all are included upto the last recipient haplotype.
Haplotypes are indexed from 1.}

\item{lookup.tables}{an optional list as returned by \code{\link[=CalcCheckpointTables]{CalcCheckpointTables()}}.}

\item{cache}{a \code{kalisCheckpointTable} object, as returned by \code{\link[=CreateForwardTableCache]{CreateForwardTableCache()}} or this function.
By default \code{NULL}, which causes this function to create a new cache.}

\item{save.cache}{a logical.
When \code{TRUE} does not reliquish the table cache upon exhaustion of the iterator.
Defaults to \code{FALSE}.}

\item{force.unif}{a logical, if \code{TRUE} iterate over targets as if they were uniformly spaced.
WARNING: DO NOT use this in conjunction with the targets method, still experimental.
With \code{force.unif = TRUE}, the resulting iterator will appear to be targeting the first \code{length(targets)} variants with all methods, but in fact will be silently iterating over the original targets.}
}
\value{
A function for iterating over the set of target variants.
The returned function has prototype:

\verb{function(fwd, pars, t, nthreads = 1)}

which matches the standard \code{\link[=Forward]{Forward()}} function, but which uses the table cache to speed up propagation to the target variant.
See \code{\link[=Forward]{Forward()}} for an explanation of arguments.
}
\description{
Function factory to create a \code{kalisForwardIterator} for propagating a forward table iteratively over target variants using a table cache and optimal checkpointing.
}
\details{
See example.
}
\examples{
\dontrun{
data("SmallHaps")
CacheHaplotypes(SmallHaps)
pars <- Parameters()
fwd <- MakeForwardTable(pars)
bck <- MakeBackwardTable(pars)
Iter <- ForwardIterator(2)
for(t in targets(Iter)){
  Iter(fwd,pars,t)
  Backward(bck,pars,t)
  print(paste("Mean Distance at locus",t,"is",mean(DistMat(fwd,bck))))
}
}

}
\references{
Christ, R., Wang, X., Aslett, L.J.M., Steinsaltz, D. and Hall, I. (2024) "Clade Distillation for Genome-wide Association Studies." bioRxiv 2024.09.30.615852. Available at: \doi{10.1101/2024.09.30.615852}.
}
\seealso{
\code{\link[=MakeForwardTable]{MakeForwardTable()}} to create a \code{kalisForwardTable};
\code{\link[=CreateForwardTableCache]{CreateForwardTableCache()}} to create a cache which can be used with this function.
}
