// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ResetBackwardTable
void ResetBackwardTable(List bck);
RcppExport SEXP _kalis_ResetBackwardTable(SEXP bckSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type bck(bckSEXP);
    ResetBackwardTable(bck);
    return R_NilValue;
END_RCPP
}
// Backward_densePi_densemu_cpp
void Backward_densePi_densemu_cpp(List bck, LogicalVector end_beta_theta, const int t, NumericMatrix Pi, NumericVector mu, NumericVector rho, const bool use_speidel, IntegerVector nthreads);
RcppExport SEXP _kalis_Backward_densePi_densemu_cpp(SEXP bckSEXP, SEXP end_beta_thetaSEXP, SEXP tSEXP, SEXP PiSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP use_speidelSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type bck(bckSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type end_beta_theta(end_beta_thetaSEXP);
    Rcpp::traits::input_parameter< const int >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_speidel(use_speidelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nthreads(nthreadsSEXP);
    Backward_densePi_densemu_cpp(bck, end_beta_theta, t, Pi, mu, rho, use_speidel, nthreads);
    return R_NilValue;
END_RCPP
}
// Backward_scalarPi_densemu_cpp
void Backward_scalarPi_densemu_cpp(List bck, LogicalVector end_beta_theta, const int t, const double Pi, NumericVector mu, NumericVector rho, const bool use_speidel, IntegerVector nthreads);
RcppExport SEXP _kalis_Backward_scalarPi_densemu_cpp(SEXP bckSEXP, SEXP end_beta_thetaSEXP, SEXP tSEXP, SEXP PiSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP use_speidelSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type bck(bckSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type end_beta_theta(end_beta_thetaSEXP);
    Rcpp::traits::input_parameter< const int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_speidel(use_speidelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nthreads(nthreadsSEXP);
    Backward_scalarPi_densemu_cpp(bck, end_beta_theta, t, Pi, mu, rho, use_speidel, nthreads);
    return R_NilValue;
END_RCPP
}
// Backward_densePi_scalarmu_cpp
void Backward_densePi_scalarmu_cpp(List bck, LogicalVector end_beta_theta, const int t, NumericMatrix Pi, const double mu, NumericVector rho, const bool use_speidel, IntegerVector nthreads);
RcppExport SEXP _kalis_Backward_densePi_scalarmu_cpp(SEXP bckSEXP, SEXP end_beta_thetaSEXP, SEXP tSEXP, SEXP PiSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP use_speidelSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type bck(bckSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type end_beta_theta(end_beta_thetaSEXP);
    Rcpp::traits::input_parameter< const int >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_speidel(use_speidelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nthreads(nthreadsSEXP);
    Backward_densePi_scalarmu_cpp(bck, end_beta_theta, t, Pi, mu, rho, use_speidel, nthreads);
    return R_NilValue;
END_RCPP
}
// Backward_scalarPi_scalarmu_cpp
void Backward_scalarPi_scalarmu_cpp(List bck, LogicalVector end_beta_theta, const int t, const double Pi, const double mu, NumericVector rho, const bool use_speidel, IntegerVector nthreads);
RcppExport SEXP _kalis_Backward_scalarPi_scalarmu_cpp(SEXP bckSEXP, SEXP end_beta_thetaSEXP, SEXP tSEXP, SEXP PiSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP use_speidelSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type bck(bckSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type end_beta_theta(end_beta_thetaSEXP);
    Rcpp::traits::input_parameter< const int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_speidel(use_speidelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nthreads(nthreadsSEXP);
    Backward_scalarPi_scalarmu_cpp(bck, end_beta_theta, t, Pi, mu, rho, use_speidel, nthreads);
    return R_NilValue;
END_RCPP
}
// CacheHaplotypes_matrix_2
int CacheHaplotypes_matrix_2(IntegerMatrix x, int N, int L, int transpose);
RcppExport SEXP _kalis_CacheHaplotypes_matrix_2(SEXP xSEXP, SEXP NSEXP, SEXP LSEXP, SEXP transposeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type transpose(transposeSEXP);
    rcpp_result_gen = Rcpp::wrap(CacheHaplotypes_matrix_2(x, N, L, transpose));
    return rcpp_result_gen;
END_RCPP
}
// CacheHaplotypes_hdf5_2
int CacheHaplotypes_hdf5_2(Function nexthaps, int N, int L);
RcppExport SEXP _kalis_CacheHaplotypes_hdf5_2(SEXP nexthapsSEXP, SEXP NSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type nexthaps(nexthapsSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(CacheHaplotypes_hdf5_2(nexthaps, N, L));
    return rcpp_result_gen;
END_RCPP
}
// CacheHaplotypes_hapgz_ncols
int CacheHaplotypes_hapgz_ncols(std::string file);
RcppExport SEXP _kalis_CacheHaplotypes_hapgz_ncols(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(CacheHaplotypes_hapgz_ncols(file));
    return rcpp_result_gen;
END_RCPP
}
// CacheHaplotypes_hapgz_nlines
int CacheHaplotypes_hapgz_nlines(std::string file);
RcppExport SEXP _kalis_CacheHaplotypes_hapgz_nlines(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(CacheHaplotypes_hapgz_nlines(file));
    return rcpp_result_gen;
END_RCPP
}
// CacheHaplotypes_hapgz_2
int CacheHaplotypes_hapgz_2(std::string file, IntegerVector loci_idx, IntegerVector hap_idx, int L, int N);
RcppExport SEXP _kalis_CacheHaplotypes_hapgz_2(SEXP fileSEXP, SEXP loci_idxSEXP, SEXP hap_idxSEXP, SEXP LSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type loci_idx(loci_idxSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type hap_idx(hap_idxSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(CacheHaplotypes_hapgz_2(file, loci_idx, hap_idx, L, N));
    return rcpp_result_gen;
END_RCPP
}
// QueryCache2_ind
IntegerVector QueryCache2_ind(int idx);
RcppExport SEXP _kalis_QueryCache2_ind(SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(QueryCache2_ind(idx));
    return rcpp_result_gen;
END_RCPP
}
// QueryCache2_loc
IntegerVector QueryCache2_loc(int idx);
RcppExport SEXP _kalis_QueryCache2_loc(SEXP idxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type idx(idxSEXP);
    rcpp_result_gen = Rcpp::wrap(QueryCache2_loc(idx));
    return rcpp_result_gen;
END_RCPP
}
// ClearHaplotypeCache2
void ClearHaplotypeCache2();
RcppExport SEXP _kalis_ClearHaplotypeCache2() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    ClearHaplotypeCache2();
    return R_NilValue;
END_RCPP
}
// ComputeStatus
std::string ComputeStatus();
RcppExport SEXP _kalis_ComputeStatus() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(ComputeStatus());
    return rcpp_result_gen;
END_RCPP
}
// ResetForwardTable
void ResetForwardTable(List fwd);
RcppExport SEXP _kalis_ResetForwardTable(SEXP fwdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fwd(fwdSEXP);
    ResetForwardTable(fwd);
    return R_NilValue;
END_RCPP
}
// Forward_densePi_densemu_cpp
void Forward_densePi_densemu_cpp(List fwd, const int t, NumericMatrix Pi, NumericVector mu, NumericVector rho, const bool use_speidel, IntegerVector nthreads);
RcppExport SEXP _kalis_Forward_densePi_densemu_cpp(SEXP fwdSEXP, SEXP tSEXP, SEXP PiSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP use_speidelSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fwd(fwdSEXP);
    Rcpp::traits::input_parameter< const int >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_speidel(use_speidelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nthreads(nthreadsSEXP);
    Forward_densePi_densemu_cpp(fwd, t, Pi, mu, rho, use_speidel, nthreads);
    return R_NilValue;
END_RCPP
}
// Forward_scalarPi_densemu_cpp
void Forward_scalarPi_densemu_cpp(List fwd, const int t, const double Pi, NumericVector mu, NumericVector rho, const bool use_speidel, IntegerVector nthreads);
RcppExport SEXP _kalis_Forward_scalarPi_densemu_cpp(SEXP fwdSEXP, SEXP tSEXP, SEXP PiSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP use_speidelSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fwd(fwdSEXP);
    Rcpp::traits::input_parameter< const int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_speidel(use_speidelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nthreads(nthreadsSEXP);
    Forward_scalarPi_densemu_cpp(fwd, t, Pi, mu, rho, use_speidel, nthreads);
    return R_NilValue;
END_RCPP
}
// Forward_densePi_scalarmu_cpp
void Forward_densePi_scalarmu_cpp(List fwd, const int t, NumericMatrix Pi, const double mu, NumericVector rho, const bool use_speidel, IntegerVector nthreads);
RcppExport SEXP _kalis_Forward_densePi_scalarmu_cpp(SEXP fwdSEXP, SEXP tSEXP, SEXP PiSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP use_speidelSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fwd(fwdSEXP);
    Rcpp::traits::input_parameter< const int >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_speidel(use_speidelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nthreads(nthreadsSEXP);
    Forward_densePi_scalarmu_cpp(fwd, t, Pi, mu, rho, use_speidel, nthreads);
    return R_NilValue;
END_RCPP
}
// Forward_scalarPi_scalarmu_cpp
void Forward_scalarPi_scalarmu_cpp(List fwd, const int t, const double Pi, const double mu, NumericVector rho, const bool use_speidel, IntegerVector nthreads);
RcppExport SEXP _kalis_Forward_scalarPi_scalarmu_cpp(SEXP fwdSEXP, SEXP tSEXP, SEXP PiSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP use_speidelSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fwd(fwdSEXP);
    Rcpp::traits::input_parameter< const int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_speidel(use_speidelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nthreads(nthreadsSEXP);
    Forward_scalarPi_scalarmu_cpp(fwd, t, Pi, mu, rho, use_speidel, nthreads);
    return R_NilValue;
END_RCPP
}
// Forward1step_scalarPi_scalarmu_cpp
void Forward1step_scalarPi_scalarmu_cpp(List fwd, const int t, const double Pi, const double mu, NumericVector rho, const bool use_speidel, IntegerVector nthreads);
RcppExport SEXP _kalis_Forward1step_scalarPi_scalarmu_cpp(SEXP fwdSEXP, SEXP tSEXP, SEXP PiSEXP, SEXP muSEXP, SEXP rhoSEXP, SEXP use_speidelSEXP, SEXP nthreadsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type fwd(fwdSEXP);
    Rcpp::traits::input_parameter< const int >::type t(tSEXP);
    Rcpp::traits::input_parameter< const double >::type Pi(PiSEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const bool >::type use_speidel(use_speidelSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nthreads(nthreadsSEXP);
    Forward1step_scalarPi_scalarmu_cpp(fwd, t, Pi, mu, rho, use_speidel, nthreads);
    return R_NilValue;
END_RCPP
}
// ResetTable
void ResetTable(List tbl);
RcppExport SEXP _kalis_ResetTable(SEXP tblSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type tbl(tblSEXP);
    ResetTable(tbl);
    return R_NilValue;
END_RCPP
}
// CopyForwardTable_cpp
void CopyForwardTable_cpp(List to, List from);
RcppExport SEXP _kalis_CopyForwardTable_cpp(SEXP toSEXP, SEXP fromSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type to(toSEXP);
    Rcpp::traits::input_parameter< List >::type from(fromSEXP);
    CopyForwardTable_cpp(to, from);
    return R_NilValue;
END_RCPP
}
// CopyBackwardTable_cpp
void CopyBackwardTable_cpp(List to, List from);
RcppExport SEXP _kalis_CopyBackwardTable_cpp(SEXP toSEXP, SEXP fromSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type to(toSEXP);
    Rcpp::traits::input_parameter< List >::type from(fromSEXP);
    CopyBackwardTable_cpp(to, from);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_kalis_ResetBackwardTable", (DL_FUNC) &_kalis_ResetBackwardTable, 1},
    {"_kalis_Backward_densePi_densemu_cpp", (DL_FUNC) &_kalis_Backward_densePi_densemu_cpp, 8},
    {"_kalis_Backward_scalarPi_densemu_cpp", (DL_FUNC) &_kalis_Backward_scalarPi_densemu_cpp, 8},
    {"_kalis_Backward_densePi_scalarmu_cpp", (DL_FUNC) &_kalis_Backward_densePi_scalarmu_cpp, 8},
    {"_kalis_Backward_scalarPi_scalarmu_cpp", (DL_FUNC) &_kalis_Backward_scalarPi_scalarmu_cpp, 8},
    {"_kalis_CacheHaplotypes_matrix_2", (DL_FUNC) &_kalis_CacheHaplotypes_matrix_2, 4},
    {"_kalis_CacheHaplotypes_hdf5_2", (DL_FUNC) &_kalis_CacheHaplotypes_hdf5_2, 3},
    {"_kalis_CacheHaplotypes_hapgz_ncols", (DL_FUNC) &_kalis_CacheHaplotypes_hapgz_ncols, 1},
    {"_kalis_CacheHaplotypes_hapgz_nlines", (DL_FUNC) &_kalis_CacheHaplotypes_hapgz_nlines, 1},
    {"_kalis_CacheHaplotypes_hapgz_2", (DL_FUNC) &_kalis_CacheHaplotypes_hapgz_2, 5},
    {"_kalis_QueryCache2_ind", (DL_FUNC) &_kalis_QueryCache2_ind, 1},
    {"_kalis_QueryCache2_loc", (DL_FUNC) &_kalis_QueryCache2_loc, 1},
    {"_kalis_ClearHaplotypeCache2", (DL_FUNC) &_kalis_ClearHaplotypeCache2, 0},
    {"_kalis_ComputeStatus", (DL_FUNC) &_kalis_ComputeStatus, 0},
    {"_kalis_ResetForwardTable", (DL_FUNC) &_kalis_ResetForwardTable, 1},
    {"_kalis_Forward_densePi_densemu_cpp", (DL_FUNC) &_kalis_Forward_densePi_densemu_cpp, 7},
    {"_kalis_Forward_scalarPi_densemu_cpp", (DL_FUNC) &_kalis_Forward_scalarPi_densemu_cpp, 7},
    {"_kalis_Forward_densePi_scalarmu_cpp", (DL_FUNC) &_kalis_Forward_densePi_scalarmu_cpp, 7},
    {"_kalis_Forward_scalarPi_scalarmu_cpp", (DL_FUNC) &_kalis_Forward_scalarPi_scalarmu_cpp, 7},
    {"_kalis_Forward1step_scalarPi_scalarmu_cpp", (DL_FUNC) &_kalis_Forward1step_scalarPi_scalarmu_cpp, 7},
    {"_kalis_ResetTable", (DL_FUNC) &_kalis_ResetTable, 1},
    {"_kalis_CopyForwardTable_cpp", (DL_FUNC) &_kalis_CopyForwardTable_cpp, 2},
    {"_kalis_CopyBackwardTable_cpp", (DL_FUNC) &_kalis_CopyBackwardTable_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_kalis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
