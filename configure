# Anticonf (tm, Jeroen Ooms) style alternative to autoconf written by Louis
# Aslett based on work by Jeroen Ooms (cf github: jeroen/curl & jeroen/openssl)

PKG_CONFIG_NAME="zlib"
PKG_DEB_NAME="zlib1g-dev"
PKG_RPM_NAME="zlib-devel"
PKG_CSW_NAME="libz_dev"
PKG_TEST_HEADER="<zlib.h>"
PKG_LIBS="-lz"
PKG_CFLAGS=""

# Try using pkg-config if it exists
pkg-config --version >/dev/null 2>&1
if [ $? -eq 0 ]; then
  PKGCONFIG_CFLAGS=`pkg-config --cflags ${PKG_CONFIG_NAME}`
  PKGCONFIG_LIBS=`pkg-config --libs ${PKG_CONFIG_NAME}`
fi

# Include and library directories
if [ "$INCLUDE_DIR" ] || [ "$LIB_DIR" ]; then
  echo "Found INCLUDE_DIR and/or LIB_DIR!"
  PKG_CFLAGS="-I$INCLUDE_DIR $PKG_CFLAGS"
  PKG_LIBS="-L$LIB_DIR $PKG_LIBS"
elif [ "$PKGCONFIG_CFLAGS" ] || [ "$PKGCONFIG_LIBS" ]; then
  echo "Found pkg-config cflags and libs!"
  PKG_CFLAGS=${PKGCONFIG_CFLAGS}
  PKG_LIBS=${PKGCONFIG_LIBS}
fi

# Find compiler
CC=`${R_HOME}/bin/R CMD config CC`
CFLAGS=`${R_HOME}/bin/R CMD config CFLAGS`

# Debug info
echo "Using PKG_CFLAGS=$PKG_CFLAGS"
echo "Using PKG_LIBS=$PKG_LIBS"

# Test configuration
echo "#include $PKG_TEST_HEADER" | ${CC} ${PKG_CFLAGS} ${CFLAGS} -E -xc - >/dev/null 2>&1 || R_CONFIG_ERROR=1;

# Customize the error
if [ $R_CONFIG_ERROR ]; then
  echo "------------------------- ANTICONF ERROR ---------------------------"
  echo "Configuration failed because $PKG_CONFIG_NAME was not found. Try installing:"
  echo " * deb: $PKG_DEB_NAME (Debian, Ubuntu, etc)"
  echo " * rpm: $PKG_RPM_NAME (Fedora, CentOS, RHEL)"
  echo " * csw: $PKG_CSW_NAME (Solaris)"
  echo "If $PKG_CONFIG_NAME is already installed, check that 'pkg-config' is in your"
  echo "PATH and PKG_CONFIG_PATH contains a $PKG_CONFIG_NAME.pc file. If pkg-config"
  echo "is unavailable you can set INCLUDE_DIR and LIB_DIR manually via:"
  echo "R CMD INSTALL --configure-vars='INCLUDE_DIR=... LIB_DIR=...'"
  echo "--------------------------------------------------------------------"
  exit 1;
fi

# Check if we're on an x86 system with intrinsics
echo "#include <immintrin.h>" | ${CC} ${PKG_CFLAGS} ${CFLAGS} -E -xc - >/dev/null 2>&1
if [ $? -eq 0 ]; then
  PKG_CFLAGS="$PKG_CFLAGS -DKALIS_IMMINTRIN_H"
fi

# Check if we're on an ARM system with intrinsics
echo "#include <arm_neon.h>" | ${CC} ${PKG_CFLAGS} ${CFLAGS} -E -xc - >/dev/null 2>&1
if [ $? -eq 0 ]; then
  PKG_CFLAGS="$PKG_CFLAGS -DKALIS_ARM_NEON_H"
fi

# To disable using assembly intrinsics even when available
if [ "$NOASM" ]; then
  PKG_CFLAGS="$PKG_CFLAGS -DKALIS_NOASM"
  echo "Assembly intrinsics disabled by NOASM configure-vars flag"
else
  echo "Assembly intrinsics will be used if available"
fi

# Check if we have access to pthreads
# NB: MacOS has pthreads but not pthread_setaffinity_np, so we need to check for functions not just header (drop -E on compiler)
echo -e "#define _GNU_SOURCE\n#include <pthread.h>\nmain() { cpu_set_t cpus; CPU_ZERO(&cpus); CPU_SET(1, &cpus); pthread_setaffinity_np(0,0,0); }" | ${CC} ${PKG_CFLAGS} ${CFLAGS} -pthread -xc - >/dev/null 2>&1
if [ $? -eq 0 ]; then
  PKG_CFLAGS="$PKG_CFLAGS -DKALIS_AFFINITY -pthread"
  PKG_LIBS="$PKG_LIBS -lpthread -pthread"
fi

# To customise unroll depth
if [ "$UNROLL" ]; then
  PKG_CFLAGS="$PKG_CFLAGS -DKALIS_UNROLL=$UNROLL"
  echo "Loop unrolling default overridden by UNROLL configure-vars flag to depth $UNROLL"
else
  echo "Loop unrolling at default value"
fi

# Gen Makevars
sed -e "s|@cflags@|$PKG_CFLAGS|" -e "s|@libs@|$PKG_LIBS|" src/Makevars.in > src/Makevars

# Success
exit 0
